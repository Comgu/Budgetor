import javax.swing.*;
import java.awt.*;
import java.util.Date;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;

/* TO DO:   History class                                                       (30 min)
            Budget adding panel finish                                          (20 min)
            Buttons for removing budget and cost items, also to history         (60 min)
            Statistical representation for month and budget                     (30 min)
            More settings?                                                      (15 min)
            Maybe table expanding for month                                     (30 min)
            Budget part for month table (200/300 â‚¬), coloring if over           (15 min)
            Undo previous cost                                                  (30 min)
            Notification when added new cost/budget                             (15 min)
            Up/Down arrows for raising budget                                   (15 min)
            Editing budget items in adjust by typing                            (15 min)
            Apply & reset buttons for settings                                  (15 min)
*/
public class BudgetorFrame extends javax.swing.JFrame {
    CostList itemList = new CostList();
    BudgetList budgetList = new BudgetList();
    ArrayList<String> types;  
    ArrayList<String> budgetTypes;
    String currency = "$";    
    
    public BudgetorFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        historyFrame = new javax.swing.JFrame();
        deleteHistoryButton = new javax.swing.JButton();
        historyScrollPane = new javax.swing.JScrollPane();
        historyTable = new javax.swing.JTable();
        // Setting default data to program
        CostItem rent = new CostItem("Rent", 300, 1);
        CostItem food = new CostItem("Food", 200, 1);
        CostItem clothes = new CostItem("Clothes", "Other", 50, 1);
        BudgetItem rentBudget = new BudgetItem("Rent", 500);
        BudgetItem foodBudget = new BudgetItem("Food", 400);
        BudgetItem clothesBudget = new BudgetItem("Clothes", "Other", 100);

        itemList.addItem(rent);
        itemList.addItem(food);
        itemList.addItem(clothes);
        itemList.resetPreviousItem();
        budgetList.addItem(rentBudget);
        budgetList.addItem(foodBudget);
        budgetList.addItem(clothesBudget);
        types = itemList.getAllTypes();
        budgetTypes = budgetList.getAllTypes();
        mainTabs = new javax.swing.JTabbedPane();
        currentMonthTab = new javax.swing.JPanel();
        expensesTitle = new javax.swing.JTextField();
        historyButton = new javax.swing.JButton();
        addCostPanel = new javax.swing.JPanel();
        addCostTitle = new javax.swing.JTextField();
        nameField = new javax.swing.JTextField();
        typeField = new javax.swing.JTextField();
        priceField = new javax.swing.JTextField();
        quantityField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        undoButton = new javax.swing.JButton();
        quantityHelper = new javax.swing.JTextField();
        dayTitle = new javax.swing.JTextField();
        monthProgressBar = new javax.swing.JProgressBar();
        infoText = new javax.swing.JTextField();
        totalText = new javax.swing.JTextField();
        totalField = new javax.swing.JTextField();
        expensesScrollPane = new javax.swing.JScrollPane();
        expensesTable = new javax.swing.JTable();
        budgetTab = new javax.swing.JPanel();
        budgetTitle = new javax.swing.JTextField();
        addBudgetPanel = new javax.swing.JPanel();
        addBudgetTitle = new javax.swing.JTextField();
        nameFieldBudget = new javax.swing.JTextField();
        typeFieldBudget = new javax.swing.JTextField();
        priceFieldBudget = new javax.swing.JTextField();
        addButtonBudget = new javax.swing.JButton();
        allocationTitle = new javax.swing.JTextField();
        budgetScrollPane = new javax.swing.JScrollPane();
        budgetTable = new javax.swing.JTable();
        percentageScrollPane = new javax.swing.JScrollPane();
        percentageTable = new javax.swing.JTable();
        settingsTab = new javax.swing.JPanel();
        settingsCategoryTabs = new javax.swing.JTabbedPane();
        generalSettingsTab = new javax.swing.JPanel();
        currencyText = new javax.swing.JTextField();
        separator1 = new javax.swing.JSeparator();
        currencyDropdown = new javax.swing.JComboBox<>();
        otherSettingsTab = new javax.swing.JPanel();
        languageText = new javax.swing.JTextField();
        separator2 = new javax.swing.JSeparator();
        languageDropdown = new javax.swing.JComboBox<>();

        historyFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        historyFrame.setTitle("History of costs");
        historyFrame.setAlwaysOnTop(true);
        historyFrame.setFocusableWindowState(false);
        historyFrame.setName("historyFrame"); // NOI18N
        historyFrame.setPreferredSize(new java.awt.Dimension(400, 360));
        historyFrame.setResizable(false);
        historyFrame.setSize(new java.awt.Dimension(400, 360));
        historyFrame.setLocationRelativeTo(null);

        deleteHistoryButton.setBackground(new java.awt.Color(240, 0, 0));
        deleteHistoryButton.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        deleteHistoryButton.setText("DELETE SELECTION");
        deleteHistoryButton.setToolTipText("Deletes selected costs");
        deleteHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteHistoryButtonActionPerformed(evt);
            }
        });

        historyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Name", "Type", "Price", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        historyScrollPane.setViewportView(historyTable);
        if (historyTable.getColumnModel().getColumnCount() > 0) {
            historyTable.getColumnModel().getColumn(0).setResizable(false);
            historyTable.getColumnModel().getColumn(1).setResizable(false);
            historyTable.getColumnModel().getColumn(2).setResizable(false);
            historyTable.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout historyFrameLayout = new javax.swing.GroupLayout(historyFrame.getContentPane());
        historyFrame.getContentPane().setLayout(historyFrameLayout);
        historyFrameLayout.setHorizontalGroup(
            historyFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(historyFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(historyFrameLayout.createSequentialGroup()
                        .addComponent(historyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, historyFrameLayout.createSequentialGroup()
                        .addComponent(deleteHistoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(143, 143, 143))))
        );
        historyFrameLayout.setVerticalGroup(
            historyFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(historyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(deleteHistoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Budgetor");
        setBackground(new java.awt.Color(225, 225, 225));
        setName("budgetorFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(640, 480));
        setResizable(false);

        mainTabs.setBackground(new java.awt.Color(225, 225, 225));
        mainTabs.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        mainTabs.setPreferredSize(new java.awt.Dimension(640, 480));

        currentMonthTab.setBackground(new java.awt.Color(220, 220, 220));
        currentMonthTab.setPreferredSize(new java.awt.Dimension(640, 480));

        expensesTitle.setEditable(false);
        expensesTitle.setBackground(new java.awt.Color(220, 220, 220));
        expensesTitle.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        expensesTitle.setText("EXPENSES");
        expensesTitle.setBorder(null);
        expensesTitle.setFocusable(false);
        expensesTitle.setRequestFocusEnabled(false);
        expensesTitle.setSelectedTextColor(new java.awt.Color(240, 240, 240));
        expensesTitle.setVerifyInputWhenFocusTarget(false);
        expensesTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expensesTitleActionPerformed(evt);
            }
        });

        historyButton.setText("See full history of costs this month");
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButtonActionPerformed(evt);
            }
        });

        addCostPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        addCostTitle.setEditable(false);
        addCostTitle.setBackground(new java.awt.Color(220, 220, 220));
        addCostTitle.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        addCostTitle.setText("ADD NEW COST ");
        addCostTitle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addCostTitle.setFocusable(false);
        addCostTitle.setRequestFocusEnabled(false);
        addCostTitle.setSelectedTextColor(new java.awt.Color(240, 240, 240));
        addCostTitle.setVerifyInputWhenFocusTarget(false);

        nameField.setText("Name");
        nameField.setToolTipText("Insert cost name here");
        nameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nameFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nameFieldFocusLost(evt);
            }
        });

        typeField.setText("Type");
        typeField.setToolTipText("Insert cost type");
        typeField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                typeFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                typeFieldFocusLost(evt);
            }
        });

        priceField.setText("Price");
        priceField.setToolTipText("Insert price here");
        priceField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                priceFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                priceFieldFocusLost(evt);
            }
        });

        quantityField.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        quantityField.setText("Quantity");
        quantityField.setToolTipText("Insert quantity here");
        quantityField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                quantityFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                quantityFieldFocusLost(evt);
            }
        });

        addButton.setText("ADD");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        undoButton.setText("Undo previous cost");
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });

        quantityHelper.setEditable(false);
        quantityHelper.setBackground(new java.awt.Color(220, 220, 220));
        quantityHelper.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        quantityHelper.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        quantityHelper.setText("x");
        quantityHelper.setBorder(null);
        quantityHelper.setFocusable(false);
        quantityHelper.setRequestFocusEnabled(false);
        quantityHelper.setSelectedTextColor(new java.awt.Color(240, 240, 240));
        quantityHelper.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout addCostPanelLayout = new javax.swing.GroupLayout(addCostPanel);
        addCostPanel.setLayout(addCostPanelLayout);
        addCostPanelLayout.setHorizontalGroup(
            addCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCostPanelLayout.createSequentialGroup()
                .addComponent(addCostTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addCostPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(addCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addCostPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addButton)
                        .addGap(18, 18, 18)
                        .addComponent(undoButton)
                        .addGap(18, 18, 18)
                        .addComponent(quantityHelper, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(addCostPanelLayout.createSequentialGroup()
                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        addCostPanelLayout.setVerticalGroup(
            addCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCostPanelLayout.createSequentialGroup()
                .addComponent(addCostTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(addCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(addCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addCostPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(addCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantityHelper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(addCostPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(addCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(undoButton)
                            .addComponent(addButton))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dayTitle.setEditable(false);
        dayTitle.setBackground(new java.awt.Color(220, 220, 220));
        dayTitle.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Date date = new Date();
        LocalDate localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        int day = localDate.getDayOfMonth();
        int month = localDate.getMonthValue();
        int daysInMonth;
        if(month == 3 || month == 5 || month == 8 ||month == 10)
        daysInMonth = 30;
        else if(month == 1)
        daysInMonth = 28;
        else daysInMonth = 31;
        dayTitle.setText("DAY " + day + " OF " + daysInMonth);
        dayTitle.setBorder(null);
        dayTitle.setFocusable(false);
        dayTitle.setRequestFocusEnabled(false);
        dayTitle.setSelectedTextColor(new java.awt.Color(240, 240, 240));
        dayTitle.setVerifyInputWhenFocusTarget(false);

        monthProgressBar.setPreferredSize(new java.awt.Dimension(280, 85));

        infoText.setEditable(false);
        infoText.setBackground(new java.awt.Color(220, 220, 220));
        infoText.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        infoText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        infoText.setText("PROGRESS:");
        infoText.setAutoscrolls(false);
        infoText.setBorder(null);
        infoText.setFocusable(false);
        infoText.setRequestFocusEnabled(false);
        infoText.setSelectedTextColor(new java.awt.Color(240, 240, 240));
        infoText.setVerifyInputWhenFocusTarget(false);

        totalText.setEditable(false);
        totalText.setBackground(new java.awt.Color(225, 225, 225));
        totalText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        totalText.setText("TOTAL");
        totalText.setFocusable(false);

        totalField.setEditable(false);
        totalField.setBackground(new java.awt.Color(225, 225, 225));
        totalField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        totalField.setFocusable(false);
        totalField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalFieldActionPerformed(evt);
            }
        });

        expensesTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        expensesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Expense", "Sum"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        expensesTable.getTableHeader().setReorderingAllowed(false);
        expensesScrollPane.setViewportView(expensesTable);
        if (expensesTable.getColumnModel().getColumnCount() > 0) {
            expensesTable.getColumnModel().getColumn(0).setResizable(false);
            expensesTable.getColumnModel().getColumn(1).setResizable(false);
        }
        updateMonthTable();

        javax.swing.GroupLayout currentMonthTabLayout = new javax.swing.GroupLayout(currentMonthTab);
        currentMonthTab.setLayout(currentMonthTabLayout);
        currentMonthTabLayout.setHorizontalGroup(
            currentMonthTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentMonthTabLayout.createSequentialGroup()
                .addGroup(currentMonthTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addCostPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(currentMonthTabLayout.createSequentialGroup()
                        .addGroup(currentMonthTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(infoText, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(currentMonthTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(currentMonthTabLayout.createSequentialGroup()
                                    .addGap(113, 113, 113)
                                    .addComponent(dayTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(currentMonthTabLayout.createSequentialGroup()
                                    .addGap(36, 36, 36)
                                    .addComponent(monthProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(28, 28, 28)))
                .addGroup(currentMonthTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(currentMonthTabLayout.createSequentialGroup()
                        .addGroup(currentMonthTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(currentMonthTabLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(totalText, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalField, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(currentMonthTabLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(expensesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(45, 45, 45))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, currentMonthTabLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(historyButton)
                        .addGap(68, 68, 68))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, currentMonthTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(expensesTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110))
        );
        currentMonthTabLayout.setVerticalGroup(
            currentMonthTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentMonthTabLayout.createSequentialGroup()
                .addGroup(currentMonthTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(currentMonthTabLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(dayTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(monthProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(infoText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addCostPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, currentMonthTabLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(expensesTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(expensesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addGroup(currentMonthTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totalText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(historyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        mainTabs.addTab("CURRENT MONTH", currentMonthTab);

        budgetTab.setBackground(new java.awt.Color(220, 220, 220));
        budgetTab.setPreferredSize(new java.awt.Dimension(640, 480));

        budgetTitle.setEditable(false);
        budgetTitle.setBackground(new java.awt.Color(220, 220, 220));
        budgetTitle.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        budgetTitle.setText("ADJUST BUDGET");
        budgetTitle.setBorder(null);
        budgetTitle.setFocusable(false);
        budgetTitle.setRequestFocusEnabled(false);
        budgetTitle.setSelectedTextColor(new java.awt.Color(240, 240, 240));
        budgetTitle.setVerifyInputWhenFocusTarget(false);

        addBudgetPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addBudgetPanel.setPreferredSize(new java.awt.Dimension(300, 100));

        addBudgetTitle.setEditable(false);
        addBudgetTitle.setBackground(new java.awt.Color(220, 220, 220));
        addBudgetTitle.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        addBudgetTitle.setText("ADD NEW OBJECT");
        addBudgetTitle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addBudgetTitle.setFocusable(false);
        addBudgetTitle.setRequestFocusEnabled(false);
        addBudgetTitle.setSelectedTextColor(new java.awt.Color(240, 240, 240));
        addBudgetTitle.setVerifyInputWhenFocusTarget(false);

        nameFieldBudget.setText("Name");
        nameFieldBudget.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nameFieldBudgetFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nameFieldBudgetFocusLost(evt);
            }
        });
        nameFieldBudget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldBudgetActionPerformed(evt);
            }
        });

        typeFieldBudget.setText("Type");
        typeFieldBudget.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                typeFieldBudgetFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                typeFieldBudgetFocusLost(evt);
            }
        });

        priceFieldBudget.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        priceFieldBudget.setText("Allocated cost");
        priceFieldBudget.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                priceFieldBudgetFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                priceFieldBudgetFocusLost(evt);
            }
        });
        priceFieldBudget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceFieldBudgetActionPerformed(evt);
            }
        });

        addButtonBudget.setText("ADD");
        addButtonBudget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonBudgetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addBudgetPanelLayout = new javax.swing.GroupLayout(addBudgetPanel);
        addBudgetPanel.setLayout(addBudgetPanelLayout);
        addBudgetPanelLayout.setHorizontalGroup(
            addBudgetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addBudgetTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addBudgetPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(addBudgetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addButtonBudget, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addBudgetPanelLayout.createSequentialGroup()
                        .addComponent(nameFieldBudget, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(typeFieldBudget, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(priceFieldBudget, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26))
        );
        addBudgetPanelLayout.setVerticalGroup(
            addBudgetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addBudgetPanelLayout.createSequentialGroup()
                .addComponent(addBudgetTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addBudgetPanelLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(addBudgetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameFieldBudget, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeFieldBudget, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceFieldBudget, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addButtonBudget, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        allocationTitle.setEditable(false);
        allocationTitle.setBackground(new java.awt.Color(220, 220, 220));
        allocationTitle.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        allocationTitle.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        allocationTitle.setText("BUDGET DISTRIBUTION");
        allocationTitle.setBorder(null);
        allocationTitle.setFocusable(false);
        allocationTitle.setRequestFocusEnabled(false);
        allocationTitle.setSelectedTextColor(new java.awt.Color(240, 240, 240));
        allocationTitle.setVerifyInputWhenFocusTarget(false);
        allocationTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allocationTitleActionPerformed(evt);
            }
        });

        budgetTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        budgetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Expense", "Sum"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        budgetTable.getTableHeader().setReorderingAllowed(false);
        budgetScrollPane.setViewportView(budgetTable);
        if (budgetTable.getColumnModel().getColumnCount() > 0) {
            budgetTable.getColumnModel().getColumn(0).setResizable(false);
            budgetTable.getColumnModel().getColumn(1).setResizable(false);
        }
        updateBudgetTable();

        percentageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Type", "Percentage of budget"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        percentageScrollPane.setViewportView(percentageTable);
        if (percentageTable.getColumnModel().getColumnCount() > 0) {
            percentageTable.getColumnModel().getColumn(0).setResizable(false);
            percentageTable.getColumnModel().getColumn(1).setResizable(false);
        }
        updateBudgetPercentages();

        javax.swing.GroupLayout budgetTabLayout = new javax.swing.GroupLayout(budgetTab);
        budgetTab.setLayout(budgetTabLayout);
        budgetTabLayout.setHorizontalGroup(
            budgetTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(budgetTabLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(budgetTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(budgetTabLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(budgetTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addBudgetPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(budgetScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(budgetTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(percentageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allocationTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        budgetTabLayout.setVerticalGroup(
            budgetTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(budgetTabLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(budgetTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(budgetTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(budgetScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(budgetTabLayout.createSequentialGroup()
                        .addComponent(allocationTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(percentageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addBudgetPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainTabs.addTab("BUDGET ADJUSTMENT", budgetTab);

        settingsTab.setBackground(new java.awt.Color(225, 225, 225));
        settingsTab.setPreferredSize(new java.awt.Dimension(640, 480));

        settingsCategoryTabs.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        settingsCategoryTabs.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        generalSettingsTab.setBackground(new java.awt.Color(220, 220, 220));

        currencyText.setEditable(false);
        currencyText.setBackground(new java.awt.Color(255, 255, 255));
        currencyText.setText("Currency type");
        currencyText.setToolTipText("Choose which currency to use (Dollar or Euro)");
        currencyText.setFocusable(false);

        currencyDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dollar $", "Euro â‚¬" }));
        currencyDropdown.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                currencyDropdownFocusLost(evt);
            }
        });

        javax.swing.GroupLayout generalSettingsTabLayout = new javax.swing.GroupLayout(generalSettingsTab);
        generalSettingsTab.setLayout(generalSettingsTabLayout);
        generalSettingsTabLayout.setHorizontalGroup(
            generalSettingsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalSettingsTabLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(currencyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currencyDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );
        generalSettingsTabLayout.setVerticalGroup(
            generalSettingsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalSettingsTabLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(generalSettingsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(currencyDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(separator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currencyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(385, Short.MAX_VALUE))
        );

        settingsCategoryTabs.addTab("General", generalSettingsTab);

        otherSettingsTab.setBackground(new java.awt.Color(220, 220, 220));

        languageText.setEditable(false);
        languageText.setBackground(new java.awt.Color(255, 255, 255));
        languageText.setText("Language");
        languageText.setToolTipText("Choose which currency to use (Dollar or Euro)");
        languageText.setFocusable(false);

        languageDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "English" }));

        javax.swing.GroupLayout otherSettingsTabLayout = new javax.swing.GroupLayout(otherSettingsTab);
        otherSettingsTab.setLayout(otherSettingsTabLayout);
        otherSettingsTabLayout.setHorizontalGroup(
            otherSettingsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherSettingsTabLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(languageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator2, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(languageDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(85, Short.MAX_VALUE))
        );
        otherSettingsTabLayout.setVerticalGroup(
            otherSettingsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherSettingsTabLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(otherSettingsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(separator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(languageDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(languageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(385, Short.MAX_VALUE))
        );

        settingsCategoryTabs.addTab("Others", otherSettingsTab);

        javax.swing.GroupLayout settingsTabLayout = new javax.swing.GroupLayout(settingsTab);
        settingsTab.setLayout(settingsTabLayout);
        settingsTabLayout.setHorizontalGroup(
            settingsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(settingsCategoryTabs)
        );
        settingsTabLayout.setVerticalGroup(
            settingsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(settingsCategoryTabs)
        );

        mainTabs.addTab("SETTINGS", settingsTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButtonActionPerformed
        historyFrame.setVisible(true);
        updateHistoryTable();
    }//GEN-LAST:event_historyButtonActionPerformed

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        itemList.undoPrevious();
        types = itemList.getAllTypes();
        updateMonthTable();        
    }//GEN-LAST:event_undoButtonActionPerformed

    private void nameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameFieldFocusGained
        if(nameField.getText().equals("Name") || nameField.getText().equals("ERROR"))
            nameField.setText("");
    }//GEN-LAST:event_nameFieldFocusGained

    private void typeFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_typeFieldFocusGained
        if(typeField.getText().equals("Type"))
            typeField.setText("");
    }//GEN-LAST:event_typeFieldFocusGained

    private void priceFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceFieldFocusGained
        if(priceField.getText().equals("Price") || priceField.getText().equals("ERROR"))
            priceField.setText("");       
    }//GEN-LAST:event_priceFieldFocusGained

    private void quantityFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantityFieldFocusGained
        if(quantityField.getText().equals("Quantity")){
            quantityField.setText("");
            quantityField.setFont(new java.awt.Font("Tahoma", 0, 11));
        }
    }//GEN-LAST:event_quantityFieldFocusGained

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if(!checkCostInput()){
            checkInvalidInputCost();
            return;
        }
        CostItem item = new CostItem();
        if(typeField.getText().equals("") || typeField.getText().equals("Type"))
            item.setType(nameField.getText());
        else 
            item.setType(typeField.getText());
        
        item.setName(nameField.getText());        
        item.setPrice(Integer.parseInt(priceField.getText()));
        if(quantityField.getText().equals("") || quantityField.getText().equals("Quantity"))
            item.setQuantity(1);
        else 
            item.setQuantity(Integer.parseInt(quantityField.getText()));        
        
        itemList.addItem(item);
        updateMonthTable();

        nameField.setText("Name");
        typeField.setText("Type");
        priceField.setText("Price");
        quantityField.setText("Quantity");
        quantityField.setFont(new java.awt.Font("Tahoma", 0, 8));
        
        nameField.setToolTipText("Insert cost name here");
        priceField.setToolTipText("Insert price here");
        nameField.setBackground(new java.awt.Color(255,255,255));
        priceField.setBackground(new java.awt.Color(255,255,255));        
        
    }//GEN-LAST:event_addButtonActionPerformed

    private void nameFieldBudgetFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameFieldBudgetFocusGained
        if(nameFieldBudget.getText().equals("Name") || nameFieldBudget.getText().equals("ERROR"))
            nameFieldBudget.setText("");
    }//GEN-LAST:event_nameFieldBudgetFocusGained

    private void typeFieldBudgetFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_typeFieldBudgetFocusGained
        if(typeFieldBudget.getText().equals("Type"))
            typeFieldBudget.setText("");
    }//GEN-LAST:event_typeFieldBudgetFocusGained

    private void priceFieldBudgetFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceFieldBudgetFocusGained
        if(priceFieldBudget.getText().equals("Allocated cost") || priceFieldBudget.getText().equals("ERROR")){
            priceFieldBudget.setText("");
            priceFieldBudget.setFont(new java.awt.Font("Tahoma", 0, 11));            
        }
    }//GEN-LAST:event_priceFieldBudgetFocusGained

    private void nameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameFieldFocusLost
        if(nameField.getBackground() == Color.red && !nameField.getText().equals("ERROR") && !nameField.getText().equals(""))
            nameField.setBackground(new java.awt.Color(255,255,255));
        if(nameField.getText().equals(""))
            nameField.setText("Name");     
    }//GEN-LAST:event_nameFieldFocusLost

    private void typeFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_typeFieldFocusLost
        if(typeField.getText().equals(""))
            typeField.setText("Type");
    }//GEN-LAST:event_typeFieldFocusLost

    private void priceFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceFieldFocusLost
        if(priceField.getBackground() == Color.red && !priceField.getText().equals("ERROR") && !priceField.getText().equals("") && priceField.getText().matches("[0-9]+"))
            priceField.setBackground(new java.awt.Color(255,255,255));
        if(priceField.getText().equals(""))
            priceField.setText("Price");   
        else if (!priceField.getText().matches("[0-9]+"))
            priceField.setText("Price");
    }//GEN-LAST:event_priceFieldFocusLost

    private void quantityFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantityFieldFocusLost
        if(quantityField.getText().equals("")){
            quantityField.setText("Quantity");
            quantityField.setFont(new java.awt.Font("Tahoma", 0, 8));            
        }
        else if (!quantityField.getText().matches("[0-9]+")){
            quantityField.setText("Quantity");
            quantityField.setFont(new java.awt.Font("Tahoma", 0, 8));            
        }
    }//GEN-LAST:event_quantityFieldFocusLost

    private void nameFieldBudgetFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameFieldBudgetFocusLost
        if(nameFieldBudget.getBackground() == Color.red && !nameFieldBudget.getText().equals("ERROR") && !nameFieldBudget.getText().equals(""))
            nameFieldBudget.setBackground(new java.awt.Color(255,255,255));        
        if(nameFieldBudget.getText().equals(""))
            nameFieldBudget.setText("Name");
    }//GEN-LAST:event_nameFieldBudgetFocusLost

    private void typeFieldBudgetFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_typeFieldBudgetFocusLost
        if(typeFieldBudget.getText().equals(""))
            typeFieldBudget.setText("Type");
    }//GEN-LAST:event_typeFieldBudgetFocusLost

    private void priceFieldBudgetFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceFieldBudgetFocusLost
        if(priceFieldBudget.getBackground() == Color.red && !priceFieldBudget.getText().equals("ERROR") && !priceFieldBudget.getText().equals("") && priceFieldBudget.getText().matches("[0-9]+"))
            priceFieldBudget.setBackground(new java.awt.Color(255,255,255));        
        if(priceFieldBudget.getText().equals("")){
            priceFieldBudget.setText("Allocated cost");
            priceFieldBudget.setFont(new java.awt.Font("Tahoma", 0, 8));            
        }
        else if (!priceFieldBudget.getText().matches("[0-9]+")){
            priceFieldBudget.setText("Allocated");        
            priceFieldBudget.setFont(new java.awt.Font("Tahoma", 0, 8));
        }
    }//GEN-LAST:event_priceFieldBudgetFocusLost

    private void currencyDropdownFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_currencyDropdownFocusLost
        if(currencyDropdown.getSelectedItem().equals("Dollar"))
            currency = "$";
        else
            currency = "â‚¬";
        updateMonthTable();
        updateBudgetTable();
    }//GEN-LAST:event_currencyDropdownFocusLost

    private void addButtonBudgetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonBudgetActionPerformed
        if(!checkBudgetInput()){
            checkInvalidInputBudget();
            return;
        }
        BudgetItem item = new BudgetItem();
        if(typeFieldBudget.getText().equals("") || typeFieldBudget.getText().equals("Type"))
            item.setType(nameFieldBudget.getText());
        else
            item.setType(typeFieldBudget.getText());
        
        item.setName(nameFieldBudget.getText());
        item.setPrice(Integer.parseInt(priceFieldBudget.getText()));
        
        if(budgetList.checkIfItemExists(item)){
            budgetList.editItemPrice(item);
            item = null;
        }
        else  
            budgetList.addItem(item);
        
        updateBudgetTable();
        
        nameFieldBudget.setText("Name");
        typeFieldBudget.setText("Type");
        priceFieldBudget.setText("Allocated cost");
        priceFieldBudget.setFont(new java.awt.Font("Tahoma", 0, 8));        
        
        nameFieldBudget.setToolTipText("Insert cost name here");
        priceFieldBudget.setToolTipText("Insert price here");
        nameFieldBudget.setBackground(new java.awt.Color(255,255,255));
        priceFieldBudget.setBackground(new java.awt.Color(255,255,255));  
    }//GEN-LAST:event_addButtonBudgetActionPerformed

    private void totalFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalFieldActionPerformed

    private void nameFieldBudgetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldBudgetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldBudgetActionPerformed

    private void priceFieldBudgetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceFieldBudgetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceFieldBudgetActionPerformed

    private void expensesTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expensesTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_expensesTitleActionPerformed

    private void deleteHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteHistoryButtonActionPerformed
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) this.historyTable.getModel();
        int[] rows = historyTable.getSelectedRows();
        for(int i=0; i < rows.length; i++){
            String name = (String) model.getValueAt(i, 0);
            String type = (String) model.getValueAt(i, 1);
            String prices = (String) model.getValueAt(i, 2);
            String priceStr = prices.substring(0, prices.indexOf("x"));
            String quantityStr = prices.substring(prices.indexOf("x") + 1, prices.length());
            priceStr = priceStr.replace(" ", "");
            int price = Integer.parseInt(priceStr);
            quantityStr = quantityStr.replace(currency, "");
            quantityStr = quantityStr.replace(" ", "");
            int quantity = Integer.parseInt(quantityStr);
            LocalDate date = (LocalDate) model.getValueAt(i, 3);
            itemList.deleteItem(name, type, price, quantity, date);
            model.removeRow(rows[i]-i);
        }
        updateMonthTable();
    }//GEN-LAST:event_deleteHistoryButtonActionPerformed

    private void allocationTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allocationTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_allocationTitleActionPerformed
   // <editor-fold defaultstate="collapsed" desc="Own code for trying stuff">    
    private void updateMonthTable(){
        types = itemList.getAllTypes();
        budgetTypes = budgetList.getAllTypes();
        for(int i=0; i < expensesTable.getRowCount(); i++){
            expensesTable.getModel().setValueAt(null, i, 0);            
            expensesTable.getModel().setValueAt(null, i, 1);            
        }
        for(int i=0; i < budgetTypes.size(); i++){
            expensesTable.getModel().setValueAt(budgetTypes.get(i), i, 0);
            expensesTable.getModel().setValueAt(0 + "/" + budgetList.getPriceFromType(budgetTypes.get(i)) + " " + currency, i, 1);
            if(i >= expensesTable.getRowCount() - 1){
                javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) expensesTable.getModel();
                model.addRow(new Object[]{null, null});
            }            
        }
        for(int i=0; i < types.size(); i++){                                // Get values for types
            int pos;
            for(int j=0; j < budgetTypes.size(); j++){
                if(budgetTypes.get(j).equals(types.get(i)))
                    pos = j;
            }
            if(budgetList.checkIfTypeExists(types.get(i)))
                expensesTable.getModel().setValueAt(itemList.getPriceFromType(types.get(i)) + "/" + budgetList.getPriceFromType(types.get(i)) + " " + currency, i, 1);
            else{
                expensesTable.getModel().setValueAt(types.get(i), i, 0);                
                expensesTable.getModel().setValueAt(itemList.getPriceFromType(types.get(i)) + "/" + 0 + " " + currency, i, 1);
            }
            if(i >= expensesTable.getRowCount() - 1){
                javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) expensesTable.getModel();
                model.addRow(new Object[]{null, null});
            }            
        }

        int totalVal = 0;
        int totalBudget = 0;
        for(int i=0; i < expensesTable.getRowCount(); i++){             // Calculate total of sums
            if(expensesTable.getModel().getValueAt(i, 1) != null){
                String val = (String) expensesTable.getModel().getValueAt(i, 1);
                val = val.substring(0, val.indexOf("/"));
                val = val.replace(currency, "");
                val = val.replace(" ", "");
                totalVal += Integer.parseInt(val);
            }
        }
        for(int i=0; i < budgetList.getSize(); i++){
            totalBudget += budgetList.getItemAt(i).getPrice();
        }
        
        totalField.setText(totalVal + "/" +  totalBudget + currency);
        if(totalVal > totalBudget)
            totalField.setBackground(Color.red);
        else
            totalField.setBackground(new java.awt.Color(225,225,225));
        
        int progress = (100 * totalVal) / totalBudget;
        monthProgressBar.setValue(progress);
        Date date = new Date();
        LocalDate localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        int day = localDate.getDayOfMonth();
        int month = localDate.getMonthValue();
        int daysInMonth;
        if(month == 3 || month == 5 || month == 8 ||month == 10)
            daysInMonth = 30;
        else if(month == 1)
            daysInMonth = 28;
        else daysInMonth = 31;
        
        int expectedProgress = (100* day) / daysInMonth;
        if(progress < expectedProgress){
            infoText.setText("PROGRESS: Under budget (" + progress + "% / " + expectedProgress + "%)");
            infoText.setForeground(Color.black);               
        }
        else {
            infoText.setText("PROGRESS: Over budget(" + progress + "% / " + expectedProgress + "%)");   
            infoText.setForeground(Color.red);            
        }
        
                    
    }
    
    private void updateBudgetTable(){
        for(int i=0; i < budgetTable.getRowCount(); i++){
            budgetTable.getModel().setValueAt(null, i, 0);            
            budgetTable.getModel().setValueAt(null, i, 1);            
        }        
        for(int i=0; i < budgetList.getSize(); i++){
            if(i >= budgetTable.getRowCount() - 1){
                javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) budgetTable.getModel();
                model.addRow(new Object[]{null, null});
            }
            budgetTable.getModel().setValueAt(budgetList.getItemAt(i).getPrice() + " " + currency, i, 1);
            if(budgetList.getItemAt(i).getType().equals(budgetList.getItemAt(i).getName()))
                budgetTable.getModel().setValueAt(budgetList.getItemAt(i).getName(), i, 0);
            else
                budgetTable.getModel().setValueAt(budgetList.getItemAt(i).getName() + " <" + budgetList.getItemAt(i).getType() + ">" , i, 0);
        }
        updateMonthTable();
        if(percentageTable.getRowCount() != 0)
            updateBudgetPercentages();
    }    
    
    private void updateHistoryTable(){
        for(int i=0; i < historyTable.getRowCount(); i++){
            historyTable.getModel().setValueAt(null, i, 0);            
            historyTable.getModel().setValueAt(null, i, 1); 
            historyTable.getModel().setValueAt(null, i, 2); 
            historyTable.getModel().setValueAt(null, i, 3);             
        }        
        int j = 0;
        for(int i=itemList.getSize()-1; i > -1; i--){
            if(j >= historyTable.getRowCount() - 1){
                javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) historyTable.getModel();
                model.addRow(new Object[]{null, null, null, null});
            }            
            CostItem item = itemList.getItemAt(i);
            historyTable.getModel().setValueAt(item.getName(), j, 0);
            historyTable.getModel().setValueAt(item.getType(), j, 1);            
            historyTable.getModel().setValueAt(item.getQuantity() + " x " + item.getPrice() + " " + currency , j, 2);
            historyTable.getModel().setValueAt(item.getDate(), j, 3);
            j++;
        }
    }
    
    private void updateBudgetPercentages(){   
        for(int i=0; i < percentageTable.getRowCount(); i++){
            percentageTable.getModel().setValueAt(null, i, 0);            
            percentageTable.getModel().setValueAt(null, i, 1);            
        }          
        for(int i=0; i < budgetTypes.size(); i++){
            if(i >= percentageTable.getRowCount() - 1){
                javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) percentageTable.getModel();
                model.addRow(new Object[]{null, null});
            }                 
            percentageTable.getModel().setValueAt(budgetTypes.get(i), i, 0);            
            int val = budgetList.getPriceFromType(budgetTypes.get(i));
            percentageTable.getModel().setValueAt((100*val)/budgetList.getTotalPrice() + " %", i, 1);           
        }
    }
    
    private boolean checkCostInput(){           // Check validity of add cost inputs
        boolean validity = true;
        if(nameField.getText().equals("") || nameField.getText().equals("Name") || nameField.getText().equals("ERROR"))
            validity = false;
        else if(priceField.getText().equals("") || priceField.getText().equals("Price") || priceField.getText().equals("ERROR"))
            validity = false;
        
        return validity;     
    }
    
    private boolean checkBudgetInput(){           // Check validity of add cost inputs
        boolean validity = true;
        if(nameFieldBudget.getText().equals("") || nameFieldBudget.getText().equals("Name") || nameFieldBudget.getText().equals("ERROR"))
            validity = false;
        else if(priceFieldBudget.getText().equals("") || priceFieldBudget.getText().equals("Allocated cost") || priceFieldBudget.getText().equals("ERROR"))
            validity = false;
        
        return validity;     
    }
    
    private void checkInvalidInputCost(){
        if(nameField.getText().equals("") || nameField.getText().equals("Name") || nameField.getText().equals("ERROR")){
            nameField.setText("ERROR");
            nameField.setToolTipText("Insert proper name (Not 'Name' or empty field)");
            nameField.setBackground(Color.red);
        }
        if(priceField.getText().equals("") || priceField.getText().equals("Price") || priceField.getText().equals("ERROR")){
            priceField.setText("ERROR");
            priceField.setToolTipText("Insert proper price (Not 'Price', empty field. Only numbers)");
            priceField.setBackground(Color.red);                 
        }
    }

    private void checkInvalidInputBudget(){
        if(nameFieldBudget.getText().equals("") || nameFieldBudget.getText().equals("Name")  || nameFieldBudget.getText().equals("ERROR")){
            nameFieldBudget.setText("ERROR");
            nameFieldBudget.setToolTipText("Insert proper name (Not 'Name' or empty field)");
            nameFieldBudget.setBackground(Color.red);
        }
        if(priceFieldBudget.getText().equals("") || priceFieldBudget.getText().equals("Allocated cost") || priceFieldBudget.getText().equals("ERROR")){
            priceFieldBudget.setText("ERROR");
            priceFieldBudget.setToolTipText("Insert proper price (Not 'Price', empty field. Only numbers)");
            priceFieldBudget.setBackground(Color.red);      
            priceFieldBudget.setFont(new java.awt.Font("Tahoma", 0, 11));              
        }
    }
    
    private void initComponents2() {
        // Adds images to tabs
        ImageIcon iconMonth = createImageIcon("img/currentmonth.png");
        ImageIcon iconBudget = createImageIcon("img/budget.png");
        ImageIcon iconSettings = createImageIcon("img/settings.png");
    }// </editor-fold>
   
    
    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = BudgetorFrame.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BudgetorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BudgetorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BudgetorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BudgetorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BudgetorFrame().setVisible(true);
            }
        });
    }        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addBudgetPanel;
    private javax.swing.JTextField addBudgetTitle;
    private javax.swing.JButton addButton;
    private javax.swing.JButton addButtonBudget;
    private javax.swing.JPanel addCostPanel;
    private javax.swing.JTextField addCostTitle;
    private javax.swing.JTextField allocationTitle;
    private javax.swing.JScrollPane budgetScrollPane;
    private javax.swing.JPanel budgetTab;
    private javax.swing.JTable budgetTable;
    private javax.swing.JTextField budgetTitle;
    private javax.swing.JComboBox<String> currencyDropdown;
    private javax.swing.JTextField currencyText;
    private javax.swing.JPanel currentMonthTab;
    private javax.swing.JTextField dayTitle;
    private javax.swing.JButton deleteHistoryButton;
    private javax.swing.JScrollPane expensesScrollPane;
    private javax.swing.JTable expensesTable;
    private javax.swing.JTextField expensesTitle;
    private javax.swing.JPanel generalSettingsTab;
    private javax.swing.JButton historyButton;
    private javax.swing.JFrame historyFrame;
    private javax.swing.JScrollPane historyScrollPane;
    private javax.swing.JTable historyTable;
    private javax.swing.JTextField infoText;
    private javax.swing.JComboBox<String> languageDropdown;
    private javax.swing.JTextField languageText;
    private javax.swing.JTabbedPane mainTabs;
    private javax.swing.JProgressBar monthProgressBar;
    private javax.swing.JTextField nameField;
    private javax.swing.JTextField nameFieldBudget;
    private javax.swing.JPanel otherSettingsTab;
    private javax.swing.JScrollPane percentageScrollPane;
    private javax.swing.JTable percentageTable;
    private javax.swing.JTextField priceField;
    private javax.swing.JTextField priceFieldBudget;
    private javax.swing.JTextField quantityField;
    private javax.swing.JTextField quantityHelper;
    private javax.swing.JSeparator separator1;
    private javax.swing.JSeparator separator2;
    private javax.swing.JTabbedPane settingsCategoryTabs;
    private javax.swing.JPanel settingsTab;
    private javax.swing.JTextField totalField;
    private javax.swing.JTextField totalText;
    private javax.swing.JTextField typeField;
    private javax.swing.JTextField typeFieldBudget;
    private javax.swing.JButton undoButton;
    // End of variables declaration//GEN-END:variables
}
